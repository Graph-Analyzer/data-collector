// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: gexf.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GexfService_ProcessGexf_FullMethodName = "/graphAnalyzerDataCollector.GexfService/ProcessGexf"
)

// GexfServiceClient is the client API for GexfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GexfServiceClient interface {
	ProcessGexf(ctx context.Context, in *GexfRequest, opts ...grpc.CallOption) (*GexfResponse, error)
}

type gexfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGexfServiceClient(cc grpc.ClientConnInterface) GexfServiceClient {
	return &gexfServiceClient{cc}
}

func (c *gexfServiceClient) ProcessGexf(ctx context.Context, in *GexfRequest, opts ...grpc.CallOption) (*GexfResponse, error) {
	out := new(GexfResponse)
	err := c.cc.Invoke(ctx, GexfService_ProcessGexf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GexfServiceServer is the server API for GexfService service.
// All implementations must embed UnimplementedGexfServiceServer
// for forward compatibility
type GexfServiceServer interface {
	ProcessGexf(context.Context, *GexfRequest) (*GexfResponse, error)
	mustEmbedUnimplementedGexfServiceServer()
}

// UnimplementedGexfServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGexfServiceServer struct {
}

func (UnimplementedGexfServiceServer) ProcessGexf(context.Context, *GexfRequest) (*GexfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessGexf not implemented")
}
func (UnimplementedGexfServiceServer) mustEmbedUnimplementedGexfServiceServer() {}

// UnsafeGexfServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GexfServiceServer will
// result in compilation errors.
type UnsafeGexfServiceServer interface {
	mustEmbedUnimplementedGexfServiceServer()
}

func RegisterGexfServiceServer(s grpc.ServiceRegistrar, srv GexfServiceServer) {
	s.RegisterService(&GexfService_ServiceDesc, srv)
}

func _GexfService_ProcessGexf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GexfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GexfServiceServer).ProcessGexf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GexfService_ProcessGexf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GexfServiceServer).ProcessGexf(ctx, req.(*GexfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GexfService_ServiceDesc is the grpc.ServiceDesc for GexfService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GexfService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graphAnalyzerDataCollector.GexfService",
	HandlerType: (*GexfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessGexf",
			Handler:    _GexfService_ProcessGexf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gexf.proto",
}
